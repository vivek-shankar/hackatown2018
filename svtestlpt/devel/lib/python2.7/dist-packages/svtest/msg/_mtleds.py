# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from svtest/mtleds.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class mtleds(genpy.Message):
  _md5sum = "3bdfd6ce62100b228c9229a3ccd8dfef"
  _type = "svtest/mtleds"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """string name
int32 l1r
int32 l1g
int32 l1b
int32 l2r
int32 l2g
int32 l2b
int32 l3r
int32 l3g
int32 l3b
int32 l4r
int32 l4g
int32 l4b



"""
  __slots__ = ['name','l1r','l1g','l1b','l2r','l2g','l2b','l3r','l3g','l3b','l4r','l4g','l4b']
  _slot_types = ['string','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       name,l1r,l1g,l1b,l2r,l2g,l2b,l3r,l3g,l3b,l4r,l4g,l4b

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(mtleds, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.name is None:
        self.name = ''
      if self.l1r is None:
        self.l1r = 0
      if self.l1g is None:
        self.l1g = 0
      if self.l1b is None:
        self.l1b = 0
      if self.l2r is None:
        self.l2r = 0
      if self.l2g is None:
        self.l2g = 0
      if self.l2b is None:
        self.l2b = 0
      if self.l3r is None:
        self.l3r = 0
      if self.l3g is None:
        self.l3g = 0
      if self.l3b is None:
        self.l3b = 0
      if self.l4r is None:
        self.l4r = 0
      if self.l4g is None:
        self.l4g = 0
      if self.l4b is None:
        self.l4b = 0
    else:
      self.name = ''
      self.l1r = 0
      self.l1g = 0
      self.l1b = 0
      self.l2r = 0
      self.l2g = 0
      self.l2b = 0
      self.l3r = 0
      self.l3g = 0
      self.l3b = 0
      self.l4r = 0
      self.l4g = 0
      self.l4b = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_12i().pack(_x.l1r, _x.l1g, _x.l1b, _x.l2r, _x.l2g, _x.l2b, _x.l3r, _x.l3g, _x.l3b, _x.l4r, _x.l4g, _x.l4b))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.name = str[start:end].decode('utf-8')
      else:
        self.name = str[start:end]
      _x = self
      start = end
      end += 48
      (_x.l1r, _x.l1g, _x.l1b, _x.l2r, _x.l2g, _x.l2b, _x.l3r, _x.l3g, _x.l3b, _x.l4r, _x.l4g, _x.l4b,) = _get_struct_12i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_12i().pack(_x.l1r, _x.l1g, _x.l1b, _x.l2r, _x.l2g, _x.l2b, _x.l3r, _x.l3g, _x.l3b, _x.l4r, _x.l4g, _x.l4b))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.name = str[start:end].decode('utf-8')
      else:
        self.name = str[start:end]
      _x = self
      start = end
      end += 48
      (_x.l1r, _x.l1g, _x.l1b, _x.l2r, _x.l2g, _x.l2b, _x.l3r, _x.l3g, _x.l3b, _x.l4r, _x.l4g, _x.l4b,) = _get_struct_12i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_12i = None
def _get_struct_12i():
    global _struct_12i
    if _struct_12i is None:
        _struct_12i = struct.Struct("<12i")
    return _struct_12i
